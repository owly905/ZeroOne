private _loadout =+ zero_var_loadouts_selectedLoadout; if(_loadout isEqualTo [])exitWith{"Das ausgewählte Loadout ist leer." call zero_fnc_msg;}; private _itemsToBuy = []; private _unaviableItems = []; private _unnecessaryItems = []; private _shopItemInfo = call zero_fnc_fetchShopItems; private _isItemBuyable = { private _index = _shopItemInfo findIf {((_x select 0) == _this) && (_x select 3)}; if (_index == -1) exitWith {false}; true }; { private _upperForEachIndex = _forEachIndex; if(count _x != 0)then{ if(!((_x select 0) call _isItemBuyable))then{ _loadout set [_upperForEachIndex,[]]; }; }; } forEach [_loadout select 0, _loadout select 1, _loadout select 2]; { private _upperForEachIndex = _forEachIndex + 3; if(count _x != 0)then{ if(!((_x select 0) call _isItemBuyable))then{ _loadout set [_upperForEachIndex,[]]; } else { { if(count _x == 7)then{ if(!((_x select 0) call _isItemBuyable))then{ private _tempClothingArray = _loadout select _upperForEachIndex; private _tempClothingContent = _tempClothingArray select 1; _tempClothingContent deleteAt _forEachIndex; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; } forEach (_x select 1); }; }; } forEach [_loadout select 3, _loadout select 4, _loadout select 5]; private _loadoutItems = _loadout call zero_fnc_fetchLoadoutItems; private _currentItems = (getUnitLoadout player) call zero_fnc_fetchLoadoutItems; private _currentItemsCopy =+ _currentItems; { if (_x in _currentItemsCopy) then { _currentItemsCopy deleteAt (_currentItemsCopy find _x); } else { if (_x call _isItemBuyable) then { _itemsToBuy pushBack _x; } else { _unaviableItems pushBack _x; }; }; } forEach _loadoutItems; _unnecessaryItems = _currentItemsCopy; private _useLocker = ["Sollen auch Gegenstände aus deinem Schließfach verwendet werden, falls möglich?","LOADOUT KAUFEN", "JA", "NEIN"] call BIS_fnc_guiMessage; private _usedLockerItems = []; private _itemsToBuyPriceCopy =+ _itemsToBuy; if (_useLocker) then { { { for "_i" from 0 to ((_x select 1)-1) do { private _currentClass = (_x select 0); private _index = (_itemsToBuyPriceCopy findIf {(toLower _x) isEqualTo (toLower _currentClass)}); if (-1 != _index) then { _usedLockerItems pushBack (_x select 0); _itemsToBuyPriceCopy deleteAt _index; }; }; } forEach _x; } forEach zero_var_locker; }; private _price = 0; { private _current = _x; _price = _price + ( (_shopItemInfo select ( _shopItemInfo findIf {(_x select 0) == _current} ) ) select 2 ); } forEach _itemsToBuyPriceCopy; _priceText = _price call zero_fnc_numberSafe; private _text = format["Willst du nötigen Ausrüstungsteile von deinem Loadout für " + _priceText + "€ kaufen?"]; if (! ([_text, "LOADOUT KAUFEN", "KAUFEN", "ABBRECHEN"] call BIS_fnc_guiMessage)) exitWith {diag_log "Loadout Kauf abgebrochen";}; private _cash = [3,0] call zero_fnc_Z0Check; if (_cash < _price) exitWith {"Du hast nicht genug Geld, um das Loadout zu bezahlen." call zero_fnc_msg}; [1,([3,0] call zero_fnc_Z0Check) - _price] call zero_fnc_Z0Check; private _storeRemainingItems = false; if(!(_unnecessaryItems isEqualTo []))then{ _storeRemainingItems = ["Einige deiner aktuellen Gegenstände werden in diesem Loadout nicht verwendet, ab damit ins Schließfach?","LOADOUT KAUFEN", "SCHLIEßFACH!", "VERBRENNEN!"] call BIS_fnc_guiMessage; }; { private _upperForEachIndex = _forEachIndex; { if (_x isEqualType "" && {_x != ""})then{ if (_x in _currentItems) then { _currentItems deleteAt (_currentItems find _x); } else { if (!(_x in _itemsToBuy)) then { private _temp = _loadout select _upperForEachIndex; _temp set [_forEachIndex,""]; _loadout set [_upperForEachIndex,_temp]; }; }; }; if (_x isEqualType [] && {count _x != 0}) then { if ((_x select 0) in _currentItems) then { _currentItems deleteAt (_currentItems find (_x select 0)); } else { if (!((_x select 0) in _itemsToBuy)) then { private _temp = _loadout select _upperForEachIndex; _temp set [_forEachIndex,[]]; _loadout set [_upperForEachIndex,_temp]; }; }; }; } forEach _x; } forEach [_loadout select 0,_loadout select 1,_loadout select 2]; { if(count _x == 2)then { private _upperForEachIndex = _forEachIndex + 3; { switch (true) do { case ((count _x == 2) && {(_x select 1) isEqualType 1}): { private _classname = _x select 0; private _amountNeeded = _x select 1; private _amountInInventory = ({ _x == _classname} count _currentItems); while {_amountNeeded > 0} do { _amountNeeded = _amountNeeded - 1; if(_amountInInventory > 0)then { _amountInInventory = _amountInInventory - 1; _currentItems deleteAt (_currentItems find _classname); } else { if (!(_classname call _isItemBuyable)) then { private _tempClothingArray = _loadout select _upperForEachIndex;
private _tempClothingContent = _tempClothingArray select 1; private _tempItemArray = _tempClothingContent select _forEachIndex; _tempItemArray set [1, (_tempItemArray select 1) - 1]; _tempClothingContent set [_forEachIndex,_tempItemArray]; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; }; }; case ((count _x == 2) && {(_x select 1) isEqualType false}): { if (!(_x select 1)) then { if ((_x select 0) in _currentItems) then { _currentItems deleteAt (_currentItems find (_x select 0)); } else { if (!((_x select 0) call _isItemBuyable)) then { private _tempClothingArray = _loadout select _upperForEachIndex; private _tempClothingContent = _tempClothingArray select 1; _tempClothingContent deleteAt _forEachIndex; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; }; }; case (count _x == 3): { private _classname = _x select 0; private _amountNeeded = _x select 1; private _amountInInventory = ({ _x == _classname} count _currentItems); while {_amountNeeded > 0} do { _amountNeeded = _amountNeeded - 1; if(_amountInInventory > 0)then { _amountInInventory = _amountInInventory - 1; _currentItems deleteAt (_currentItems find _classname); } else { if (!(_classname call _isItemBuyable)) then { private _tempClothingArray = _loadout select _upperForEachIndex; private _tempClothingContent = _tempClothingArray select 1; private _tempItemArray = _tempClothingContent select _forEachIndex; _tempItemArray set [1, (_tempItemArray select 1) - 1]; _tempClothingContent set [_forEachIndex,_tempItemArray]; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; }; }; case (count _x == 7): { private _middleForEachIndex = _forEachIndex; { if (_x isEqualType "" && _x != "")then{ if (_x in _currentItems) then { _currentItems deleteAt (_currentItems find _x); } else { if (!(_x in _itemsToBuy)) then { private _tempClothingArray = _loadout select _upperForEachIndex; private _tempClothingContent = _tempClothingArray select 1; private _tempItemArray = _tempClothingContent select _middleForEachIndex; _tempItemArray set [_forEachIndex, ""]; _tempClothingContent set [_middleForEachIndex,_tempItemArray]; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; }; if (_x isEqualType [] && {count _x != 0}) then { if ((_x select 0) in _currentItems) then { _currentItems deleteAt (_currentItems find (_x select 0)); } else { if (!((_x select 0) in _itemsToBuy)) then { private _tempClothingArray = _loadout select _upperForEachIndex; private _tempClothingContent = _tempClothingArray select 1; private _tempItemArray = _tempClothingContent select _middleForEachIndex; _tempItemArray set [_forEachIndex, []]; _tempClothingContent set [_middleForEachIndex,_tempItemArray]; _tempClothingArray set [1,_tempClothingContent]; _loadout set [_upperForEachIndex,_tempClothingArray]; }; }; }; } forEach _x; }; }; } forEach (_x select 1); }; } forEach [_loadout select 3,_loadout select 4,_loadout select 5]; { private _loadoutIndex = _forEachIndex + 6; if (_x in _currentItems) then { _currentItems deleteAt (_currentItems find _x); } else { if (!(_x in _itemsToBuy)) then { _loadout set [_loadoutIndex,""]; }; }; } forEach [_loadout select 6, _loadout select 7]; if (((_loadout select 8) select 0) in _currentItems) then { _currentItems deleteAt (_currentItems find ((_loadout select 8) select 0)); } else { if (!(((_loadout select 8) select 0) in _itemsToBuy))then { _loadout set [8,[]]; }; }; { if (_x != "") then { if (_x in _currentItems) then { _currentItems deleteAt (_currentItems find _x); } else { if (!(_x in _itemsToBuy))then { private _temp = _loadout select 9; _temp set [_forEachIndex,""]; _loadout set [9,_temp]; }; }; }; } forEach (_loadout select 9); player setUnitLoadout _loadout; private _addToLocker = []; if(_useLocker)then{ private _locker =+ zero_var_locker; { { for "_i" from 0 to ((_x select 1)-1) do { _addToLocker pushBack (_x select 0); }; } forEach _x; } forEach _locker; { _addToLocker deleteAt (_addToLocker find _x); } forEach _usedLockerItems; zero_var_locker = [[],[],[],[],[],[],[],[],[],[],[]]; }; if(_storeRemainingItems)then { { _addToLocker pushBack _x; } forEach _unnecessaryItems; }; { [_x,1] call zero_fnc_addItemToLocker; } forEach _addToLocker; _createLogString = { private _rtn = []; { private _upperX = _x; private _index = _rtn findIf {_x select 0 == _upperX}; if (_index == -1) then { _rtn pushBack [_x,1]; } else { (_rtn select _index) set [1, ((_rtn select _index) select 1) + 1]; } } forEach _this; _rtn }; _toLog = format["LOADOUT: %1 (%2, %3) hat ein Loadout für %4€ gekauft: Neu gekaufte Items: %5 Aus Locker genommen: %6 In Locker gelegt: %7", player getVariable["zero_var_realname",name player], getPlayerUID player, playerSide, _priceText, _itemsToBuyPriceCopy call _createLogString, _usedLockerItems call _createLogString, _unnecessaryItems call _createLogString]; [_toLog] call zero_fnc_zoLog;
